<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Ehlxr - A responsive and simple theme for Hugo</title>
    <link>/tags/javascript/</link>
    <description>Recent content in Javascript on Ehlxr - A responsive and simple theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Dec 2018 10:51:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将时间戳转换为格式化日期</title>
      <link>/2018/12/14/%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/</link>
      <pubDate>Fri, 14 Dec 2018 10:51:00 +0000</pubDate>
      
      <guid>/2018/12/14/%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F/</guid>
      <description>timestamp 缺省表示使用当前时间戳，formats 默认格式是 YYYY-MM-DD HH:mm:ss，例如 2000-01-01 12:00:00。 /* * 时间戳转换成指定格式日期 * eg. * dateFormat(11111111111111, &#39;YYYY</description>
    </item>
    
    <item>
      <title>时间戳显示为多少分钟前，多少天前的JS处理</title>
      <link>/2018/12/13/%E6%97%B6%E9%97%B4%E6%88%B3%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%A4%9A%E5%B0%91%E5%88%86%E9%92%9F%E5%89%8D%E5%A4%9A%E5%B0%91%E5%A4%A9%E5%89%8D%E7%9A%84js%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 13 Dec 2018 10:51:00 +0000</pubDate>
      
      <guid>/2018/12/13/%E6%97%B6%E9%97%B4%E6%88%B3%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%A4%9A%E5%B0%91%E5%88%86%E9%92%9F%E5%89%8D%E5%A4%9A%E5%B0%91%E5%A4%A9%E5%89%8D%E7%9A%84js%E5%A4%84%E7%90%86/</guid>
      <description>方法名为 getTimeAgoAt，支持一个时间戳参数 stamptime（必需）。 先上代码 因为后端返回时间戳通常精确到秒（10位），而 JS 获取时</description>
    </item>
    
    <item>
      <title>网络请求接口-fetch</title>
      <link>/2018/09/30/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3-fetch/</link>
      <pubDate>Sun, 30 Sep 2018 19:30:13 +0000</pubDate>
      
      <guid>/2018/09/30/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3-fetch/</guid>
      <description>fetch 简介 最简单的 fetch 请求如下 fetch(&#39;http://example.com/movies.json&#39;) .then(function(resp) { return resp.json(); }) .then(function(data) { console.log(data); }); fetch 请求 封装 1 GET 请求 getData (url) { return fetch(url) } 2 POST 请求 以 form-data 形式提交数据 postData (url, payload) { return fetch(url, { method: &#39;POST&#39;, body: JSON.stringify(payload), headers: new Headers({ &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; }) }) } 以 json</description>
    </item>
    
    <item>
      <title>React 中阻止事件冒泡</title>
      <link>/2017/11/19/react-%E4%B8%AD%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</link>
      <pubDate>Sun, 19 Nov 2017 20:20:53 +0000</pubDate>
      
      <guid>/2017/11/19/react-%E4%B8%AD%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</guid>
      <description>&lt;p&gt;react 和原生 JavaScript 阻止事件冒泡的方式是否相同？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>