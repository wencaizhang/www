<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on Even - A super concise theme for Hugo</title>
    <link>/tags/js/</link>
    <description>Recent content in js on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Dec 2018 18:20:53 +0000</lastBuildDate>
    
	<atom:link href="/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ElementUI（Vue）中按照百分比对表格排序</title>
      <link>/post/oh-my-article/vue/vue-element-table-sort-by-prop/</link>
      <pubDate>Wed, 26 Dec 2018 18:20:53 +0000</pubDate>
      
      <guid>/post/oh-my-article/vue/vue-element-table-sort-by-prop/</guid>
      <description>首先，Element Vue 的表格组件支持排序功能，并且支持自定义排序。 然后，需求是让表格可以按照某一列（百分比）排序。 因为默认提供的排序功能实际</description>
    </item>
    
    <item>
      <title>判断浏览器类型</title>
      <link>/post/oh-my-article/javascript/get-broswer-type/</link>
      <pubDate>Thu, 22 Feb 2018 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-article/javascript/get-broswer-type/</guid>
      <description>判断是否为手机浏览器 1 2 3 4 5 6 7 8 9 10 11 function isMobile () { // Android if (/android/i.test(navigator.userAgent)) { return true; } // iOS if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) { return true; } return false; }; 判断是否为微信浏览器 1 2 3 4 function isWeChatBroswer(){ var ua = navigator.userAgent.toLowerCase(); return /micromessenger/.test(ua) }</description>
    </item>
    
    <item>
      <title>Array.isArray()</title>
      <link>/post/oh-my-js/02-array-es5/10-array.isarray/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/10-array.isarray/</guid>
      <description>描述 Array.isArray() 方法用于确定一个值是否为 Array 类型。 注意：Array.isArray() 方法只能由构造函数 Array 调用，而数组实例无法调用。 ps：严格判断 JavaScript 对象</description>
    </item>
    
    <item>
      <title>Array.of()</title>
      <link>/post/oh-my-js/03-array-es6/02-array.of/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/02-array.of/</guid>
      <description>描述 Array.of 方法用于将一组值转换为数组。基本可以用来替代 Array() 或者 new Array()，并且不存在由于参数不同而导致的重载。 参数 参数 描述 arguments 任意值，不限个数</description>
    </item>
    
    <item>
      <title>Array.prototype.concat()</title>
      <link>/post/oh-my-js/01-array-es3/01-array.concat/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/01-array.concat/</guid>
      <description>描述 方法 concat() 将创建并返回一个新数组，这个方法将所有参数都添加到新数组中。它并不修改原数组 。如果要进行 concat() 操作的参数是一个数组，那么添加的是数组中</description>
    </item>
    
    <item>
      <title>Array.prototype.every()</title>
      <link>/post/oh-my-js/02-array-es5/05-array.every/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/05-array.every/</guid>
      <description>描述 every() 方法对数组每一项运行给定函数 fn ，如果该函数对每一项都返回 true ，则 every() 方法返回 true，否则返回 false。 参数 参数 描述 fn function 类型，必需。数组</description>
    </item>
    
    <item>
      <title>Array.prototype.filter()</title>
      <link>/post/oh-my-js/02-array-es5/03-array.filter/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/03-array.filter/</guid>
      <description>filter: 过滤 描述 filter() 方法对数组中每一项运行给定函数 fn ,返回使该函数返回值为 true 的项组成的数组。 参数 参数 描述 fn function 类型，必需。数组中每个元素需要调用的函数</description>
    </item>
    
    <item>
      <title>Array.prototype.find()</title>
      <link>/post/oh-my-js/03-array-es6/04-array.find/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/04-array.find/</guid>
      <description>描述 find 方法用于找出第一个符合条件的数组元素。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找到第一个返回值为 true 的元素，然后返回</description>
    </item>
    
    <item>
      <title>Array.prototype.forEach()</title>
      <link>/post/oh-my-js/02-array-es5/01-array.foreach/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/01-array.foreach/</guid>
      <description>描述 forEach() 方法对数组每一项运行给定函数 fn，无返回值。另外，还可以指定函数 fn 的上下文环境（this）。 参数 参数 描述 fn function 类型，必需。数组中每个元素</description>
    </item>
    
    <item>
      <title>Array.prototype.includes()</title>
      <link>/post/oh-my-js/03-array-es6/10-array.includes/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/10-array.includes/</guid>
      <description>判断数组中是否包含某个元素，我们通常这么做： 1 2 3 4 5 6 7 var arr = [ 1, 2, 3 ] if (arr.indexOf(4) == -1) { console.log(&amp;#39;不包含&amp;#39;) } else</description>
    </item>
    
    <item>
      <title>Array.prototype.indexOf()</title>
      <link>/post/oh-my-js/02-array-es5/06-array.indexof/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/06-array.indexof/</guid>
      <description>描述 indexOf() 方法返回在数组中可以找到一个给定元素的第一个索引（使用全等操作符），如果不存在，则返回 -1 。 参数 参数 描述 searchElement 要查找的元素 fromIndex 可选。开始查找的</description>
    </item>
    
    <item>
      <title>Array.prototype.join()</title>
      <link>/post/oh-my-js/01-array-es3/02-array.join/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/02-array.join/</guid>
      <description>描述 所有的数组元素都被转化成字符串，再用一个分隔符将这些字符串连接起来。如果元素是 undefined 或者 null，则会被转换成空字符串。 参数 参数 描述 separator 可选。</description>
    </item>
    
    <item>
      <title>Array.prototype.lastIndexOf()</title>
      <link>/post/oh-my-js/02-array-es5/07-array.lastindexof/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/07-array.lastindexof/</guid>
      <description>描述 lastIndexOf() 方法返回在指定元素在数组中的最后一个的索引，如果不存在则返回 -1 。 查找方式为从数组的后面向前查找，从 fromIndex 处开始（使用全等操作符）。 参数 参数</description>
    </item>
    
    <item>
      <title>Array.prototype.map()</title>
      <link>/post/oh-my-js/02-array-es5/02-array.map/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/02-array.map/</guid>
      <description>map: 映射 描述 map() 方法对数组中每一项运行给定函数 callback ，返回值是每次 callback 函数调用的结果组成的数组。 另外可以指定函数 callback 的上下文环境（this）。 使用 map() 方法</description>
    </item>
    
    <item>
      <title>Array.prototype.pop()</title>
      <link>/post/oh-my-js/01-array-es3/04-array.pop/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/04-array.pop/</guid>
      <description>描述 从一个数组中删除并返回最后一个元素。（修改原数组） 参数 无 返回值 从数组中删除的元素（当数组为空时返回 undefined） 示例 1 2 3 4 5 var arr</description>
    </item>
    
    <item>
      <title>Array.prototype.push()</title>
      <link>/post/oh-my-js/01-array-es3/03-array.push/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/03-array.push/</guid>
      <description>描述 将一个或多个元素添加到数组的末尾，并返回新数组的长度（对原数组进行修改） 参数 参数 描述 elementN 必需，个数为至少一个。被添加到数组末尾的元素。 返回</description>
    </item>
    
    <item>
      <title>Array.prototype.reduce()</title>
      <link>/post/oh-my-js/02-array-es5/08-array.reduce/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/08-array.reduce/</guid>
      <description>reduce: 减少，缩小。但是 reduce() 方法并无此含义，而是“迭代，递归”。 描述 reduce() 方法从左向右迭代数组所有项，构建一个最终返回的值。 reduce() 方法接收两个参数：一个在每</description>
    </item>
    
    <item>
      <title>Array.prototype.reduceRight()</title>
      <link>/post/oh-my-js/02-array-es5/09-array.reduceright/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/09-array.reduceright/</guid>
      <description>描述 reduceRight() 方法从右向左迭代数组所有项，构建一个最终返回的值。 reduceRight() 方法接收两个参数：一个在每一项上调用的函数和（可选）作为迭代基础的初始值。 参数 参数</description>
    </item>
    
    <item>
      <title>Array.prototype.reverse()</title>
      <link>/post/oh-my-js/01-array-es3/09-array.reverse/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/09-array.reverse/</guid>
      <description>描述 reverse() 方法用于颠倒数组中元素的顺序。（修改原数组） 参数 无 返回值 返回颠倒顺序后的数组。 示例 1 2 3 var numbers = [1, 2, 3, 4]; numbers.reverse(); console.log(numbers); // [4, 3, 2, 1]</description>
    </item>
    
    <item>
      <title>Array.prototype.shift()</title>
      <link>/post/oh-my-js/01-array-es3/05-array.shift/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/05-array.shift/</guid>
      <description>描述 从一个数组中删除并返回第一个元素。（修改原数组） 参数 无 返回值 从数组中删除的元素（当数组为空时返回 undefined） 示例 1 2 3 4 5 var arr =</description>
    </item>
    
    <item>
      <title>Array.prototype.slice()</title>
      <link>/post/oh-my-js/01-array-es3/07-array.slice/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/07-array.slice/</guid>
      <description>描述 不修改原数组，只返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝： 如果该元素是个对象引用（不是实际的对象）， slice</description>
    </item>
    
    <item>
      <title>Array.prototype.some()</title>
      <link>/post/oh-my-js/02-array-es5/04-array.some/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/02-array-es5/04-array.some/</guid>
      <description>描述 some() 方法对数组每一项运行给定函数 fn ，如果该函数对任意一项返回 true ，则 some() 方法返回 true，否则返回 false。 参数 参数 描述 fn function 类型，必需。数组</description>
    </item>
    
    <item>
      <title>Array.prototype.sort()</title>
      <link>/post/oh-my-js/01-array-es3/10-array.sort/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/10-array.sort/</guid>
      <description>描述 对数组的元素进行排序，并返回数组，默认排序顺序是根据字符串 Unicode 码点。（修改原数组） 为了实现排序，sort() 方法会调用每个数组项的 toString() 方法，</description>
    </item>
    
    <item>
      <title>Array.prototype.splice()</title>
      <link>/post/oh-my-js/01-array-es3/08-array.splice/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/08-array.splice/</guid>
      <description>描述 通过删除现有元素或者添加新元素来更改一个数组的内容 参数 start 指定修改的开始位置。如果超出了数组的长度，则从数组末尾开始添加内容，如果是负值，</description>
    </item>
    
    <item>
      <title>Array.prototype.unshift()</title>
      <link>/post/oh-my-js/01-array-es3/06-array.unshift/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/01-array-es3/06-array.unshift/</guid>
      <description>描述 将一个或多个元素添加到数组的开头，并返回新数组的长度。（修改原数组） 参数 参数 描述 elementN 必需，个数为至少一个。要添加到数组开头的元素 返回值 从数</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/01-array.from/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/01-array.from/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/03-array.copywithin/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/03-array.copywithin/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/05-array.findindex/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/05-array.findindex/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/06-array.fill/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/06-array.fill/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/07-array.entries/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/07-array.entries/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/08-array.keys/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/08-array.keys/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Array.prototype.xxx()</title>
      <link>/post/oh-my-js/03-array-es6/09-array.values/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/03-array-es6/09-array.values/</guid>
      <description>描述 参数 参数 描述 xxx yyy 返回值 示例 1 模拟实现 1</description>
    </item>
    
    <item>
      <title>Object.assign()</title>
      <link>/post/oh-my-js/05-object/05-object.assign/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/05-object.assign/</guid>
      <description>描述 ES6 引入 Object.assign 方法，它用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。 如果目标对象和源对象有同名属性</description>
    </item>
    
    <item>
      <title>Object.defineProperty()</title>
      <link>/post/oh-my-js/05-object/07-object.defineproperty/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/07-object.defineproperty/</guid>
      <description>用法 这个方法在一个对象上定义一个新属性，或者修改一个已经存在的属性。并返回这个对象。 1 Object.defineProperty(obj, prop, descriptor); obj: 目标对象 prop: 要操作的属性 descriptor: 要操作的属性所拥有的特</description>
    </item>
    
    <item>
      <title>Object.entries()</title>
      <link>/post/oh-my-js/05-object/04-object.entries/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/04-object.entries/</guid>
      <description>描述 ES6 引入 Object.entries 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。 参数 参数 描述 obj Object 类型</description>
    </item>
    
    <item>
      <title>Object.is()</title>
      <link>/post/oh-my-js/05-object/06-object.is/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/06-object.is/</guid>
      <description>描述 ES6 引入 Object.assign 方法，它用于比较两个值是否严格相等。 相等运算符（==）会自动转换类型，严格相等运算符 NaN 不等于自身，而且 +0 等于 -0。 Object.is() 方法和严格相</description>
    </item>
    
    <item>
      <title>Object.keys()</title>
      <link>/post/oh-my-js/05-object/02-object.keys/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/02-object.keys/</guid>
      <description>描述 ES6 引入 Object.keys 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。 参数 参数 描述 obj Object 类型，必需</description>
    </item>
    
    <item>
      <title>Object.prototype.hasOwnProperty()</title>
      <link>/post/oh-my-js/05-object/01-hasownproperty/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/01-hasownproperty/</guid>
      <description>描述 JavaScript 对象既可以有自己的属性，也可以从原型继承。通过 hasOwnProperty 可以区分继承属性和非继承属性。 参数 参数 描述 prop String 类型，必需。要检测的属性名 返回值 布尔值，</description>
    </item>
    
    <item>
      <title>Object.values()</title>
      <link>/post/oh-my-js/05-object/03-object.values/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/05-object/03-object.values/</guid>
      <description>描述 ES6 引入 Object.values 方法，它返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值 参数 参数 描述 obj Object 类型，必需。</description>
    </item>
    
    <item>
      <title>Regexp.prototype.exec()</title>
      <link>/post/oh-my-js/06-regexp/03-regexp.exec/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/03-regexp.exec/</guid>
      <description>描述 在一个指定字符串中执行一个搜索匹配。返回一个数组或 null。 参数 参数 描述 string 必需。要匹配正则表达式的字符串。 返回值 如果匹配成功，exec(</description>
    </item>
    
    <item>
      <title>Regexp.prototype.test()</title>
      <link>/post/oh-my-js/06-regexp/02-regexp.test/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/02-regexp.test/</guid>
      <description>描述 检测字符串中是否含有与 regexp 相匹配的文本。 参数 参数 描述 string 必需。要检测的字符串 返回值 如果字符串 string 中含有与 regexp 匹配的文本，就返回 true，否则返回</description>
    </item>
    
    <item>
      <title>String.prototype.match()</title>
      <link>/post/oh-my-js/06-regexp/05-string.prototype.match/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/05-string.prototype.match/</guid>
      <description>描述 检测字符串中是否含有与 regexp 相匹配的文本。 如果正则表达式不包含 g 标志，则 match() 方法返回值和 RegExp.exec() 返回值是相同的。 如果正则表达式包含 g 标志，则返回一个</description>
    </item>
    
    <item>
      <title>String.prototype.replace()</title>
      <link>/post/oh-my-js/06-regexp/06-string.prototype.replace/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/06-string.prototype.replace/</guid>
      <description>描述 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象 返回值 见描述 示例 是否包含 g 的区别 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>String.prototype.search()</title>
      <link>/post/oh-my-js/06-regexp/04-string.prototype.search/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/04-string.prototype.search/</guid>
      <description>描述 检测字符串中是否含有与 regexp 相匹配的文本。类似于 Regexp.prototype.test 方法。 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对</description>
    </item>
    
    <item>
      <title>String.prototype.split()</title>
      <link>/post/oh-my-js/06-regexp/07-string.prototype.split/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/07-string.prototype.split/</guid>
      <description>描述 把一个字符串分割成一个数组。 它和 Array.prototype.join() 的操作是相反的。 参数 参数 描述 regexp 必需。如果传入一个非正则表达式，则会使用 new RegExp() 将其隐式转换为正则表达式对象</description>
    </item>
    
    <item>
      <title>String.prototype.toLowerCase()</title>
      <link>/post/oh-my-js/04-string/001-string.tolowercase/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/04-string/001-string.tolowercase/</guid>
      <description>描述 toLowerCase 会将调用该方法的字符串转为小写形式，并返回。 toLowerCase 不会影响字符串本身。 参数 无 返回值 一个新的字符串，转换为小写形式之后的字符串。 示例 1 2 3 4</description>
    </item>
    
    <item>
      <title>String.prototype.toUpperCase()</title>
      <link>/post/oh-my-js/04-string/002-string.touppercase/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/04-string/002-string.touppercase/</guid>
      <description>描述 toUpperCase 会将调用该方法的字符串转为大写形式，并返回。 toUpperCase 不会影响字符串本身。 参数 无 返回值 一个新的字符串，转换为大写形式之后的字符串。 示例 1 2 3 4</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>/post/oh-my-js/06-regexp/00-regexp/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/00-regexp/</guid>
      <description>正则表达式验证工具： https://regexper.com/ 创建正则表达式 构造函数 1 2 3 var reg1 = new RegExp(&amp;#39;a&amp;#39;); var reg2 = new RegExp(&amp;#39;[a-zA-Z]&amp;#39;, &amp;#39;gi&amp;#39;); var reg3 = new RegExp(/[a-zA-Z]/, &amp;#39;gi&amp;#39;); 字面量 1 var reg = /[a-zA-Z]/gi; 修饰符 修饰符 描述 i 执行对大小写不敏感的匹</description>
    </item>
    
    <item>
      <title>正则表达式使用案例</title>
      <link>/post/oh-my-js/06-regexp/100-regexp-demos/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/100-regexp-demos/</guid>
      <description>隐藏手机号码中间 4 位数字： 前三位数字：^(\d{3}) 中间 4 位数字：\d{4} 最后 4 位数字：(\d{4})$ 子表达式：() 中的内容是一个子表</description>
    </item>
    
    <item>
      <title>正则表达式的 lastIndex 属性</title>
      <link>/post/oh-my-js/06-regexp/01-regexp.lastindex/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/01-regexp.lastindex/</guid>
      <description>描述 在每个实例化的正则对象中，都存在一个 lastIndex 属性，初始值为 0 。 lastIndex 属性是进行正则匹配操作的开始的位置 如果正则表达式不带 g 标志，则 lastIndex 始终为 0。 如果</description>
    </item>
    
    <item>
      <title>正则表达式预查</title>
      <link>/post/oh-my-js/06-regexp/0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%A2%84%E6%9F%A5/</link>
      <pubDate>Mon, 20 Feb 2017 00:28:21 +0000</pubDate>
      
      <guid>/post/oh-my-js/06-regexp/0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%A2%84%E6%9F%A5/</guid>
      <description>预查格式 (?=pattern) 上代码 通俗点说，就是 预查不消耗字符串，仅仅是用来确认是否匹配成功。 1 2 3 4 5 6 var str = &amp;#34;abc&amp;#34;; var reg1 = /a(?=b)bc/; var reg2 = /a(b)bc/; console.log(reg1.test(str)); // true console.log(reg2.test(str)); // false reg1 中的预查 (?=b) 并没</description>
    </item>
    
    <item>
      <title>JS 数组去重</title>
      <link>/post/javascript/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>利用 ES6 的新特性 1 2 3 function uniq (arr) { return [...new Set(arr)] }</description>
    </item>
    
  </channel>
</rss>